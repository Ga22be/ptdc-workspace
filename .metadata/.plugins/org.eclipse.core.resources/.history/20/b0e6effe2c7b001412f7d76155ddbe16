package lab8_9;
import java.awt.Color;
import se.lth.cs.ptdc.images.ImageFilter;

/** IdentityFilter beskriver en identitetstransformation */
public class SobelFilter extends ImageFilter {
	private Color[] bw = new Color[2];
	public SobelFilter(String name) {
		super(name);
		bw[0] = Color.WHITE;
		bw[1] = Color.BLACK;
	}
	
	public Color[][] apply(Color[][] inPixels, double paramValue) {
		int height = inPixels.length;
		int width = inPixels[0].length;
		short[][] intensity = computeIntensity(inPixels);	
//		short[][] sx = new short[height][width];
//		short[][] sy = new short[height][width];
		Color[][] outPixels = new Color[height][width];
		
		double threshold = paramValue;
		
		
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				outPixels[i][j] = greyScale[intensity[i][j]];
			}
		}
		
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				if(i > 1 && i < height-1 && j > 1 && j < width-1){
					short sx = convolve(intensity, i, j, X_SOBEL, 1);
					short sy = convolve(intensity, i, j, Y_SOBEL, 1);
					if(Math.abs(sx) + Math.abs(sy) < threshold){						
						outPixels[i][j] = bw[0];
					} else { outPixels[i][j] = bw[1]; }
				} else {
					// outPixels[i][j] = inPixels[i][j];
					outPixels[i][j] = bw[0];
				}
			}
		}
		
		return outPixels;
	}
	
	private static short[][] X_SOBEL = 
		{ {-1, 0, 1}, 
		  {-2, 0, 2}, 
		  {-1, 0, 1} }; 
			
	private static short[][] Y_SOBEL = 
		{ {-1, -2, -1},
		  { 0, 0, 0},
		  { 1, 2, 1} };
}
